[build-system]
# The assumed default build requirements from pip are: "setuptools>=40.8.0",
#     "wheel"
# See: https://pip.pypa.io/en/stable/reference/pip/#pep-517-and-518-support
# These are taken from the PyScaffold example
# See: https://github.com/pyscaffold/pyscaffold-demo
requires = ["setuptools>=46.1.0", "setuptools_scm[toml]>=5", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools_scm]
# See configuration details in https://github.com/pypa/setuptools_scm
version_scheme = "no-guess-dev"

[project]
name = "Pycollo"
description = "General-purpose optimal control, trajectory optimisation and parameter optimisation using direct collocation"
readme = "README.rst"
requires-python = ">=3.8"
license = {file = "LICENSE"}
authors = [
    {name = "Sam Brockie", email = "sambrockie@icloud.com"},
]
keywords = [
    "optimal control",
    "optimal control problem",
    "ocp",
    "trajectory optimisation",
    "trajectory optimization",
    "parameter optimisation",
    "parameter optimization",
    "collocation",
    "direct collocation",
    "predictive simulation",
]
classifiers = [
    "Development Status :: 2 - Pre-Alpha",
    "Intended Audience :: Science/Research",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Natural Language :: English",
    "Topic :: Utilities",
]
dependencies = [
    "casadi >=3.5.5",
    "matplotlib >=3.3.2",
    "numba >=0.51.2",
    "numpy >=1.19.1",
    "pyproprop >=0.4.10",
    "scipy >=1.5.2",
    "sympy >=1.6.2",
]
dynamic = [
  "version",
]

[project.optional-dependencies]
docs = [
    "sphinx >=3.2",
    "sphinx-autodoc-typehints >=1.11",
    "sphinx-material >=0.35",
]
tests = [
    "hypothesis >=5.28",
    "pytest >=6.0",
    "pytest-cases >=2.2.5",
]
dev = [
    "black",
    "mypy",
    "ruff",
]

[project.urls]
"Documentation" = "https://brocksam.github.io/pycollo"
"PyPI" = "https://pypi.org/project/pycollo"
"conda-forge" = "https://anaconda.org/conda-forge/pycollo"
"Source Code" = "https://github.com/brocksam/pycollo"
"Issue Tracker" = "https://github.com/brocksam/pycollo/issues"

[tool.pytest.ini_options]
testpaths = "tests"
markers = [
    "incremental: marks related sequential tests to stop after an earlier failure",
]

[tool.black]
exclude = '''
(
    asv_bench/env
  | \.egg
  | \.git
  | \.hg
  | \.mypy_cache
  | \.nox
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | setup.py
)
'''

[tool.ruff]
# Enable Pyflakes `E` and `F` codes by default.
select = ["C4", "E", "F", "I"]
ignore = [
    "E501",  # Line too long (<LINE LENGTH> > <LINE LENGTH LIMIT> characters)
    "E741",  # Ambiguous variable name: `<VARIABLE NAME>`
    "F541",  # f-string without any placeholders
    "F811",  # Redefinition of unused `<FUNCTION NAME>` from line 243
    "F821",  # Undefined name `<VARIABLE>`
]

# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = ["A", "B", "C", "D", "E", "F", "I"]
unfixable = []

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

# Same as Black.
line-length = 88

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Assume Python 3.10.
target-version = "py310"

[tool.ruff.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10

[tool.mypy]
ignore_missing_imports = true
